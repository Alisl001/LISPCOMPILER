// Generated from c:/antlr/LispCompiler/LispParser.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class LispParserLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, DEFUN=2, DEFparameter=3, IF=4, CONDITION=5, LET=6, QUOTE=7, PRINT=8, 
		LAMBDA=9, FORMAT=10, NUMBER=11, STRING=12, IDENTIFIER=13, PLUS=14, MINUS=15, 
		MULT=16, DIV=17, MOD=18, GREATER_EQUAL=19, LESS_EQUAL=20, GREATER=21, 
		LESS=22, EQUAL=23, LPAREN=24, RPAREN=25, TRUE=26, FALSE=27, COMMENT=28, 
		WS=29, ERROR=30;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "DEFUN", "DEFparameter", "IF", "CONDITION", "LET", "QUOTE", "PRINT", 
			"LAMBDA", "FORMAT", "NUMBER", "STRING", "ESC_SEQ", "IDENTIFIER", "PLUS", 
			"MINUS", "MULT", "DIV", "MOD", "GREATER_EQUAL", "LESS_EQUAL", "GREATER", 
			"LESS", "EQUAL", "LPAREN", "RPAREN", "TRUE", "FALSE", "COMMENT", "WS", 
			"ERROR"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "','", "'defun'", "'defparameter'", "'if'", "'cond'", "'let'", 
			"'quote'", "'print'", "'lambda'", "'format'", null, null, null, "'+'", 
			"'-'", "'*'", "'/'", "'%'", "'>='", "'<='", "'>'", "'<'", "'='", "'('", 
			"')'", "'true'", "'false'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "DEFUN", "DEFparameter", "IF", "CONDITION", "LET", "QUOTE", 
			"PRINT", "LAMBDA", "FORMAT", "NUMBER", "STRING", "IDENTIFIER", "PLUS", 
			"MINUS", "MULT", "DIV", "MOD", "GREATER_EQUAL", "LESS_EQUAL", "GREATER", 
			"LESS", "EQUAL", "LPAREN", "RPAREN", "TRUE", "FALSE", "COMMENT", "WS", 
			"ERROR"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public LispParserLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "LispParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 30:
			ERROR_action((RuleContext)_localctx, actionIndex);
			break;
		}
	}
	private void ERROR_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:
			 System.err.println("Invalid character: " + _input.getText(_start, _input.index())); 
			break;
		}
	}

	public static final String _serializedATN =
		"\u0004\u0000\u001e\u00d5\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017"+
		"\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a"+
		"\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d"+
		"\u0002\u001e\u0007\u001e\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\n\u0004\n|\b\n\u000b\n\f\n}\u0001\n\u0001"+
		"\n\u0004\n\u0082\b\n\u000b\n\f\n\u0083\u0003\n\u0086\b\n\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0005\u000b\u008b\b\u000b\n\u000b\f\u000b\u008e\t\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0005"+
		"\r\u0097\b\r\n\r\f\r\u009a\t\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001"+
		"\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001"+
		"\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001"+
		"\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0005\u001c\u00c5\b\u001c\n\u001c\f\u001c\u00c8\t\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001d\u0004\u001d\u00cd\b\u001d\u000b\u001d"+
		"\f\u001d\u00ce\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0000\u0000\u001f\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005"+
		"\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019"+
		"\u0000\u001b\r\u001d\u000e\u001f\u000f!\u0010#\u0011%\u0012\'\u0013)\u0014"+
		"+\u0015-\u0016/\u00171\u00183\u00195\u001a7\u001b9\u001c;\u001d=\u001e"+
		"\u0001\u0000\u0007\u0001\u000009\u0002\u0000\"\"\\\\\u0007\u0000\"\"\'"+
		"\'\\\\bbnnrrtt\u0003\u0000AZ__az\u0006\u0000**--09AZ__az\u0001\u0000\n"+
		"\n\u0003\u0000\t\n\r\r  \u00db\u0000\u0001\u0001\u0000\u0000\u0000\u0000"+
		"\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000"+
		"\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b"+
		"\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001"+
		"\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001"+
		"\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001"+
		"\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d\u0001"+
		"\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001\u0000"+
		"\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000\u0000"+
		"\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000"+
		"+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/\u0001"+
		"\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000\u0000"+
		"\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u0000"+
		"9\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000=\u0001"+
		"\u0000\u0000\u0000\u0001?\u0001\u0000\u0000\u0000\u0003A\u0001\u0000\u0000"+
		"\u0000\u0005G\u0001\u0000\u0000\u0000\u0007T\u0001\u0000\u0000\u0000\t"+
		"W\u0001\u0000\u0000\u0000\u000b\\\u0001\u0000\u0000\u0000\r`\u0001\u0000"+
		"\u0000\u0000\u000ff\u0001\u0000\u0000\u0000\u0011l\u0001\u0000\u0000\u0000"+
		"\u0013s\u0001\u0000\u0000\u0000\u0015{\u0001\u0000\u0000\u0000\u0017\u0087"+
		"\u0001\u0000\u0000\u0000\u0019\u0091\u0001\u0000\u0000\u0000\u001b\u0094"+
		"\u0001\u0000\u0000\u0000\u001d\u009b\u0001\u0000\u0000\u0000\u001f\u009d"+
		"\u0001\u0000\u0000\u0000!\u009f\u0001\u0000\u0000\u0000#\u00a1\u0001\u0000"+
		"\u0000\u0000%\u00a3\u0001\u0000\u0000\u0000\'\u00a5\u0001\u0000\u0000"+
		"\u0000)\u00a8\u0001\u0000\u0000\u0000+\u00ab\u0001\u0000\u0000\u0000-"+
		"\u00ad\u0001\u0000\u0000\u0000/\u00af\u0001\u0000\u0000\u00001\u00b1\u0001"+
		"\u0000\u0000\u00003\u00b3\u0001\u0000\u0000\u00005\u00b5\u0001\u0000\u0000"+
		"\u00007\u00ba\u0001\u0000\u0000\u00009\u00c0\u0001\u0000\u0000\u0000;"+
		"\u00cc\u0001\u0000\u0000\u0000=\u00d2\u0001\u0000\u0000\u0000?@\u0005"+
		",\u0000\u0000@\u0002\u0001\u0000\u0000\u0000AB\u0005d\u0000\u0000BC\u0005"+
		"e\u0000\u0000CD\u0005f\u0000\u0000DE\u0005u\u0000\u0000EF\u0005n\u0000"+
		"\u0000F\u0004\u0001\u0000\u0000\u0000GH\u0005d\u0000\u0000HI\u0005e\u0000"+
		"\u0000IJ\u0005f\u0000\u0000JK\u0005p\u0000\u0000KL\u0005a\u0000\u0000"+
		"LM\u0005r\u0000\u0000MN\u0005a\u0000\u0000NO\u0005m\u0000\u0000OP\u0005"+
		"e\u0000\u0000PQ\u0005t\u0000\u0000QR\u0005e\u0000\u0000RS\u0005r\u0000"+
		"\u0000S\u0006\u0001\u0000\u0000\u0000TU\u0005i\u0000\u0000UV\u0005f\u0000"+
		"\u0000V\b\u0001\u0000\u0000\u0000WX\u0005c\u0000\u0000XY\u0005o\u0000"+
		"\u0000YZ\u0005n\u0000\u0000Z[\u0005d\u0000\u0000[\n\u0001\u0000\u0000"+
		"\u0000\\]\u0005l\u0000\u0000]^\u0005e\u0000\u0000^_\u0005t\u0000\u0000"+
		"_\f\u0001\u0000\u0000\u0000`a\u0005q\u0000\u0000ab\u0005u\u0000\u0000"+
		"bc\u0005o\u0000\u0000cd\u0005t\u0000\u0000de\u0005e\u0000\u0000e\u000e"+
		"\u0001\u0000\u0000\u0000fg\u0005p\u0000\u0000gh\u0005r\u0000\u0000hi\u0005"+
		"i\u0000\u0000ij\u0005n\u0000\u0000jk\u0005t\u0000\u0000k\u0010\u0001\u0000"+
		"\u0000\u0000lm\u0005l\u0000\u0000mn\u0005a\u0000\u0000no\u0005m\u0000"+
		"\u0000op\u0005b\u0000\u0000pq\u0005d\u0000\u0000qr\u0005a\u0000\u0000"+
		"r\u0012\u0001\u0000\u0000\u0000st\u0005f\u0000\u0000tu\u0005o\u0000\u0000"+
		"uv\u0005r\u0000\u0000vw\u0005m\u0000\u0000wx\u0005a\u0000\u0000xy\u0005"+
		"t\u0000\u0000y\u0014\u0001\u0000\u0000\u0000z|\u0007\u0000\u0000\u0000"+
		"{z\u0001\u0000\u0000\u0000|}\u0001\u0000\u0000\u0000}{\u0001\u0000\u0000"+
		"\u0000}~\u0001\u0000\u0000\u0000~\u0085\u0001\u0000\u0000\u0000\u007f"+
		"\u0081\u0005.\u0000\u0000\u0080\u0082\u0007\u0000\u0000\u0000\u0081\u0080"+
		"\u0001\u0000\u0000\u0000\u0082\u0083\u0001\u0000\u0000\u0000\u0083\u0081"+
		"\u0001\u0000\u0000\u0000\u0083\u0084\u0001\u0000\u0000\u0000\u0084\u0086"+
		"\u0001\u0000\u0000\u0000\u0085\u007f\u0001\u0000\u0000\u0000\u0085\u0086"+
		"\u0001\u0000\u0000\u0000\u0086\u0016\u0001\u0000\u0000\u0000\u0087\u008c"+
		"\u0005\"\u0000\u0000\u0088\u008b\u0003\u0019\f\u0000\u0089\u008b\b\u0001"+
		"\u0000\u0000\u008a\u0088\u0001\u0000\u0000\u0000\u008a\u0089\u0001\u0000"+
		"\u0000\u0000\u008b\u008e\u0001\u0000\u0000\u0000\u008c\u008a\u0001\u0000"+
		"\u0000\u0000\u008c\u008d\u0001\u0000\u0000\u0000\u008d\u008f\u0001\u0000"+
		"\u0000\u0000\u008e\u008c\u0001\u0000\u0000\u0000\u008f\u0090\u0005\"\u0000"+
		"\u0000\u0090\u0018\u0001\u0000\u0000\u0000\u0091\u0092\u0005\\\u0000\u0000"+
		"\u0092\u0093\u0007\u0002\u0000\u0000\u0093\u001a\u0001\u0000\u0000\u0000"+
		"\u0094\u0098\u0007\u0003\u0000\u0000\u0095\u0097\u0007\u0004\u0000\u0000"+
		"\u0096\u0095\u0001\u0000\u0000\u0000\u0097\u009a\u0001\u0000\u0000\u0000"+
		"\u0098\u0096\u0001\u0000\u0000\u0000\u0098\u0099\u0001\u0000\u0000\u0000"+
		"\u0099\u001c\u0001\u0000\u0000\u0000\u009a\u0098\u0001\u0000\u0000\u0000"+
		"\u009b\u009c\u0005+\u0000\u0000\u009c\u001e\u0001\u0000\u0000\u0000\u009d"+
		"\u009e\u0005-\u0000\u0000\u009e \u0001\u0000\u0000\u0000\u009f\u00a0\u0005"+
		"*\u0000\u0000\u00a0\"\u0001\u0000\u0000\u0000\u00a1\u00a2\u0005/\u0000"+
		"\u0000\u00a2$\u0001\u0000\u0000\u0000\u00a3\u00a4\u0005%\u0000\u0000\u00a4"+
		"&\u0001\u0000\u0000\u0000\u00a5\u00a6\u0005>\u0000\u0000\u00a6\u00a7\u0005"+
		"=\u0000\u0000\u00a7(\u0001\u0000\u0000\u0000\u00a8\u00a9\u0005<\u0000"+
		"\u0000\u00a9\u00aa\u0005=\u0000\u0000\u00aa*\u0001\u0000\u0000\u0000\u00ab"+
		"\u00ac\u0005>\u0000\u0000\u00ac,\u0001\u0000\u0000\u0000\u00ad\u00ae\u0005"+
		"<\u0000\u0000\u00ae.\u0001\u0000\u0000\u0000\u00af\u00b0\u0005=\u0000"+
		"\u0000\u00b00\u0001\u0000\u0000\u0000\u00b1\u00b2\u0005(\u0000\u0000\u00b2"+
		"2\u0001\u0000\u0000\u0000\u00b3\u00b4\u0005)\u0000\u0000\u00b44\u0001"+
		"\u0000\u0000\u0000\u00b5\u00b6\u0005t\u0000\u0000\u00b6\u00b7\u0005r\u0000"+
		"\u0000\u00b7\u00b8\u0005u\u0000\u0000\u00b8\u00b9\u0005e\u0000\u0000\u00b9"+
		"6\u0001\u0000\u0000\u0000\u00ba\u00bb\u0005f\u0000\u0000\u00bb\u00bc\u0005"+
		"a\u0000\u0000\u00bc\u00bd\u0005l\u0000\u0000\u00bd\u00be\u0005s\u0000"+
		"\u0000\u00be\u00bf\u0005e\u0000\u0000\u00bf8\u0001\u0000\u0000\u0000\u00c0"+
		"\u00c1\u0005;\u0000\u0000\u00c1\u00c2\u0005;\u0000\u0000\u00c2\u00c6\u0001"+
		"\u0000\u0000\u0000\u00c3\u00c5\b\u0005\u0000\u0000\u00c4\u00c3\u0001\u0000"+
		"\u0000\u0000\u00c5\u00c8\u0001\u0000\u0000\u0000\u00c6\u00c4\u0001\u0000"+
		"\u0000\u0000\u00c6\u00c7\u0001\u0000\u0000\u0000\u00c7\u00c9\u0001\u0000"+
		"\u0000\u0000\u00c8\u00c6\u0001\u0000\u0000\u0000\u00c9\u00ca\u0006\u001c"+
		"\u0000\u0000\u00ca:\u0001\u0000\u0000\u0000\u00cb\u00cd\u0007\u0006\u0000"+
		"\u0000\u00cc\u00cb\u0001\u0000\u0000\u0000\u00cd\u00ce\u0001\u0000\u0000"+
		"\u0000\u00ce\u00cc\u0001\u0000\u0000\u0000\u00ce\u00cf\u0001\u0000\u0000"+
		"\u0000\u00cf\u00d0\u0001\u0000\u0000\u0000\u00d0\u00d1\u0006\u001d\u0000"+
		"\u0000\u00d1<\u0001\u0000\u0000\u0000\u00d2\u00d3\t\u0000\u0000\u0000"+
		"\u00d3\u00d4\u0006\u001e\u0001\u0000\u00d4>\u0001\u0000\u0000\u0000\t"+
		"\u0000}\u0083\u0085\u008a\u008c\u0098\u00c6\u00ce\u0002\u0006\u0000\u0000"+
		"\u0001\u001e\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}