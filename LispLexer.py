# Generated from LispLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,179,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,5,0,53,8,
        0,10,0,12,0,56,9,0,1,0,1,0,1,1,1,1,1,1,1,2,4,2,64,8,2,11,2,12,2,
        65,1,2,1,2,4,2,70,8,2,11,2,12,2,71,3,2,74,8,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,5,11,128,8,11,10,11,12,11,131,9,11,1,12,1,12,1,13,1,13,1,14,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,5,21,162,
        8,21,10,21,12,21,165,9,21,1,21,1,21,1,21,1,21,1,22,4,22,172,8,22,
        11,22,12,22,173,1,22,1,22,1,23,1,23,1,163,0,24,1,1,3,0,5,2,7,3,9,
        4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,23,31,14,33,
        15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,1,0,6,2,0,34,34,92,
        92,7,0,34,34,39,39,92,92,98,98,110,110,114,114,116,116,1,0,48,57,
        3,0,65,90,95,95,97,122,6,0,42,42,45,45,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,185,0,1,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,
        1,0,0,0,3,59,1,0,0,0,5,63,1,0,0,0,7,75,1,0,0,0,9,81,1,0,0,0,11,84,
        1,0,0,0,13,89,1,0,0,0,15,93,1,0,0,0,17,99,1,0,0,0,19,105,1,0,0,0,
        21,118,1,0,0,0,23,125,1,0,0,0,25,132,1,0,0,0,27,134,1,0,0,0,29,136,
        1,0,0,0,31,140,1,0,0,0,33,142,1,0,0,0,35,144,1,0,0,0,37,146,1,0,
        0,0,39,148,1,0,0,0,41,153,1,0,0,0,43,159,1,0,0,0,45,171,1,0,0,0,
        47,177,1,0,0,0,49,54,5,34,0,0,50,53,3,3,1,0,51,53,8,0,0,0,52,50,
        1,0,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,
        55,57,1,0,0,0,56,54,1,0,0,0,57,58,5,34,0,0,58,2,1,0,0,0,59,60,5,
        92,0,0,60,61,7,1,0,0,61,4,1,0,0,0,62,64,7,2,0,0,63,62,1,0,0,0,64,
        65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,73,1,0,0,0,67,69,5,46,
        0,0,68,70,7,2,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,
        1,0,0,0,72,74,1,0,0,0,73,67,1,0,0,0,73,74,1,0,0,0,74,6,1,0,0,0,75,
        76,5,100,0,0,76,77,5,101,0,0,77,78,5,102,0,0,78,79,5,117,0,0,79,
        80,5,110,0,0,80,8,1,0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,83,10,
        1,0,0,0,84,85,5,99,0,0,85,86,5,111,0,0,86,87,5,110,0,0,87,88,5,100,
        0,0,88,12,1,0,0,0,89,90,5,108,0,0,90,91,5,101,0,0,91,92,5,116,0,
        0,92,14,1,0,0,0,93,94,5,113,0,0,94,95,5,117,0,0,95,96,5,111,0,0,
        96,97,5,116,0,0,97,98,5,101,0,0,98,16,1,0,0,0,99,100,5,112,0,0,100,
        101,5,114,0,0,101,102,5,105,0,0,102,103,5,110,0,0,103,104,5,116,
        0,0,104,18,1,0,0,0,105,106,5,100,0,0,106,107,5,101,0,0,107,108,5,
        102,0,0,108,109,5,112,0,0,109,110,5,97,0,0,110,111,5,114,0,0,111,
        112,5,97,0,0,112,113,5,109,0,0,113,114,5,101,0,0,114,115,5,116,0,
        0,115,116,5,101,0,0,116,117,5,114,0,0,117,20,1,0,0,0,118,119,5,102,
        0,0,119,120,5,111,0,0,120,121,5,114,0,0,121,122,5,109,0,0,122,123,
        5,97,0,0,123,124,5,116,0,0,124,22,1,0,0,0,125,129,7,3,0,0,126,128,
        7,4,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,
        1,0,0,0,130,24,1,0,0,0,131,129,1,0,0,0,132,133,5,43,0,0,133,26,1,
        0,0,0,134,135,5,45,0,0,135,28,1,0,0,0,136,137,5,42,0,0,137,138,1,
        0,0,0,138,139,6,14,0,0,139,30,1,0,0,0,140,141,5,47,0,0,141,32,1,
        0,0,0,142,143,5,37,0,0,143,34,1,0,0,0,144,145,5,40,0,0,145,36,1,
        0,0,0,146,147,5,41,0,0,147,38,1,0,0,0,148,149,5,116,0,0,149,150,
        5,114,0,0,150,151,5,117,0,0,151,152,5,101,0,0,152,40,1,0,0,0,153,
        154,5,102,0,0,154,155,5,97,0,0,155,156,5,108,0,0,156,157,5,115,0,
        0,157,158,5,101,0,0,158,42,1,0,0,0,159,163,5,59,0,0,160,162,9,0,
        0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,164,1,0,0,0,163,161,1,0,
        0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,10,0,0,167,168,1,0,
        0,0,168,169,6,21,1,0,169,44,1,0,0,0,170,172,7,5,0,0,171,170,1,0,
        0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,0,
        0,0,175,176,6,22,1,0,176,46,1,0,0,0,177,178,9,0,0,0,178,48,1,0,0,
        0,9,0,52,54,65,71,73,129,163,173,2,3,0,0,6,0,0
    ]

class LispLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STRING = 1
    NUMBER = 2
    DEFUN = 3
    IF = 4
    COND = 5
    LET = 6
    QUOTE = 7
    PRINT = 8
    DEFPARAMETER = 9
    FORMAT = 10
    IDENTIFIER = 11
    PLUS = 12
    MINUS = 13
    DIV = 14
    MOD = 15
    LPAREN = 16
    RPAREN = 17
    TRUE = 18
    FALSE = 19
    COMMENT = 20
    WS = 21
    ERROR = 22
    MULT = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'defun'", "'if'", "'cond'", "'let'", "'quote'", "'print'", 
            "'defparameter'", "'format'", "'+'", "'-'", "'/'", "'%'", "'('", 
            "')'", "'true'", "'false'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "DEFUN", "IF", "COND", "LET", "QUOTE", "PRINT", 
            "DEFPARAMETER", "FORMAT", "IDENTIFIER", "PLUS", "MINUS", "DIV", 
            "MOD", "LPAREN", "RPAREN", "TRUE", "FALSE", "COMMENT", "WS", 
            "ERROR", "MULT" ]

    ruleNames = [ "STRING", "ESC_SEQ", "NUMBER", "DEFUN", "IF", "COND", 
                  "LET", "QUOTE", "PRINT", "DEFPARAMETER", "FORMAT", "IDENTIFIER", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "LPAREN", "RPAREN", 
                  "TRUE", "FALSE", "COMMENT", "WS", "ERROR" ]

    grammarFileName = "LispLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


