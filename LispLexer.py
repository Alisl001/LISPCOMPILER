# Generated from LispLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,234,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,5,0,73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,1,
        1,1,1,1,1,2,4,2,84,8,2,11,2,12,2,85,1,2,1,2,4,2,90,8,2,11,2,12,2,
        91,3,2,94,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,5,16,171,8,16,10,16,12,16,174,9,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
        31,5,31,217,8,31,10,31,12,31,220,9,31,1,31,1,31,1,31,1,31,1,32,4,
        32,227,8,32,11,32,12,32,228,1,32,1,32,1,33,1,33,1,218,0,34,1,1,3,
        0,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,
        14,31,15,33,16,35,17,37,18,39,33,41,19,43,20,45,21,47,22,49,23,51,
        24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,1,0,6,2,0,34,
        34,92,92,7,0,34,34,39,39,92,92,98,98,110,110,114,114,116,116,1,0,
        48,57,3,0,65,90,95,95,97,122,6,0,42,42,45,45,48,57,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,240,0,1,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        1,69,1,0,0,0,3,79,1,0,0,0,5,83,1,0,0,0,7,95,1,0,0,0,9,101,1,0,0,
        0,11,104,1,0,0,0,13,109,1,0,0,0,15,113,1,0,0,0,17,119,1,0,0,0,19,
        125,1,0,0,0,21,138,1,0,0,0,23,145,1,0,0,0,25,152,1,0,0,0,27,156,
        1,0,0,0,29,159,1,0,0,0,31,163,1,0,0,0,33,168,1,0,0,0,35,175,1,0,
        0,0,37,177,1,0,0,0,39,179,1,0,0,0,41,183,1,0,0,0,43,185,1,0,0,0,
        45,187,1,0,0,0,47,190,1,0,0,0,49,193,1,0,0,0,51,195,1,0,0,0,53,197,
        1,0,0,0,55,199,1,0,0,0,57,201,1,0,0,0,59,203,1,0,0,0,61,208,1,0,
        0,0,63,214,1,0,0,0,65,226,1,0,0,0,67,232,1,0,0,0,69,74,5,34,0,0,
        70,73,3,3,1,0,71,73,8,0,0,0,72,70,1,0,0,0,72,71,1,0,0,0,73,76,1,
        0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,
        78,5,34,0,0,78,2,1,0,0,0,79,80,5,92,0,0,80,81,7,1,0,0,81,4,1,0,0,
        0,82,84,7,2,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,
        1,0,0,0,86,93,1,0,0,0,87,89,5,46,0,0,88,90,7,2,0,0,89,88,1,0,0,0,
        90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,87,1,
        0,0,0,93,94,1,0,0,0,94,6,1,0,0,0,95,96,5,100,0,0,96,97,5,101,0,0,
        97,98,5,102,0,0,98,99,5,117,0,0,99,100,5,110,0,0,100,8,1,0,0,0,101,
        102,5,105,0,0,102,103,5,102,0,0,103,10,1,0,0,0,104,105,5,99,0,0,
        105,106,5,111,0,0,106,107,5,110,0,0,107,108,5,100,0,0,108,12,1,0,
        0,0,109,110,5,108,0,0,110,111,5,101,0,0,111,112,5,116,0,0,112,14,
        1,0,0,0,113,114,5,113,0,0,114,115,5,117,0,0,115,116,5,111,0,0,116,
        117,5,116,0,0,117,118,5,101,0,0,118,16,1,0,0,0,119,120,5,112,0,0,
        120,121,5,114,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,
        116,0,0,124,18,1,0,0,0,125,126,5,100,0,0,126,127,5,101,0,0,127,128,
        5,102,0,0,128,129,5,112,0,0,129,130,5,97,0,0,130,131,5,114,0,0,131,
        132,5,97,0,0,132,133,5,109,0,0,133,134,5,101,0,0,134,135,5,116,0,
        0,135,136,5,101,0,0,136,137,5,114,0,0,137,20,1,0,0,0,138,139,5,108,
        0,0,139,140,5,97,0,0,140,141,5,109,0,0,141,142,5,98,0,0,142,143,
        5,100,0,0,143,144,5,97,0,0,144,22,1,0,0,0,145,146,5,102,0,0,146,
        147,5,111,0,0,147,148,5,114,0,0,148,149,5,109,0,0,149,150,5,97,0,
        0,150,151,5,116,0,0,151,24,1,0,0,0,152,153,5,97,0,0,153,154,5,110,
        0,0,154,155,5,100,0,0,155,26,1,0,0,0,156,157,5,111,0,0,157,158,5,
        114,0,0,158,28,1,0,0,0,159,160,5,110,0,0,160,161,5,111,0,0,161,162,
        5,116,0,0,162,30,1,0,0,0,163,164,5,101,0,0,164,165,5,108,0,0,165,
        166,5,115,0,0,166,167,5,101,0,0,167,32,1,0,0,0,168,172,7,3,0,0,169,
        171,7,4,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,
        173,1,0,0,0,173,34,1,0,0,0,174,172,1,0,0,0,175,176,5,43,0,0,176,
        36,1,0,0,0,177,178,5,45,0,0,178,38,1,0,0,0,179,180,5,42,0,0,180,
        181,1,0,0,0,181,182,6,19,0,0,182,40,1,0,0,0,183,184,5,47,0,0,184,
        42,1,0,0,0,185,186,5,37,0,0,186,44,1,0,0,0,187,188,5,62,0,0,188,
        189,5,61,0,0,189,46,1,0,0,0,190,191,5,60,0,0,191,192,5,61,0,0,192,
        48,1,0,0,0,193,194,5,62,0,0,194,50,1,0,0,0,195,196,5,60,0,0,196,
        52,1,0,0,0,197,198,5,61,0,0,198,54,1,0,0,0,199,200,5,40,0,0,200,
        56,1,0,0,0,201,202,5,41,0,0,202,58,1,0,0,0,203,204,5,116,0,0,204,
        205,5,114,0,0,205,206,5,117,0,0,206,207,5,101,0,0,207,60,1,0,0,0,
        208,209,5,102,0,0,209,210,5,97,0,0,210,211,5,108,0,0,211,212,5,115,
        0,0,212,213,5,101,0,0,213,62,1,0,0,0,214,218,5,59,0,0,215,217,9,
        0,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,219,1,0,0,0,218,216,1,
        0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,5,10,0,0,222,223,1,
        0,0,0,223,224,6,31,1,0,224,64,1,0,0,0,225,227,7,5,0,0,226,225,1,
        0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,230,1,
        0,0,0,230,231,6,32,1,0,231,66,1,0,0,0,232,233,9,0,0,0,233,68,1,0,
        0,0,9,0,72,74,85,91,93,172,218,228,2,3,0,0,6,0,0
    ]

class LispLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STRING = 1
    NUMBER = 2
    DEFUN = 3
    IF = 4
    COND = 5
    LET = 6
    QUOTE = 7
    PRINT = 8
    DEFPARAMETER = 9
    LAMBDA = 10
    FORMAT = 11
    AND = 12
    OR = 13
    NOT = 14
    ELSE = 15
    IDENTIFIER = 16
    PLUS = 17
    MINUS = 18
    DIV = 19
    MOD = 20
    GREATER_EQUAL = 21
    LESS_EQUAL = 22
    GREATER = 23
    LESS = 24
    EQUAL = 25
    LPAREN = 26
    RPAREN = 27
    TRUE = 28
    FALSE = 29
    COMMENT = 30
    WS = 31
    ERROR = 32
    MULT = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'defun'", "'if'", "'cond'", "'let'", "'quote'", "'print'", 
            "'defparameter'", "'lambda'", "'format'", "'and'", "'or'", "'not'", 
            "'else'", "'+'", "'-'", "'/'", "'%'", "'>='", "'<='", "'>'", 
            "'<'", "'='", "'('", "')'", "'true'", "'false'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "DEFUN", "IF", "COND", "LET", "QUOTE", "PRINT", 
            "DEFPARAMETER", "LAMBDA", "FORMAT", "AND", "OR", "NOT", "ELSE", 
            "IDENTIFIER", "PLUS", "MINUS", "DIV", "MOD", "GREATER_EQUAL", 
            "LESS_EQUAL", "GREATER", "LESS", "EQUAL", "LPAREN", "RPAREN", 
            "TRUE", "FALSE", "COMMENT", "WS", "ERROR", "MULT" ]

    ruleNames = [ "STRING", "ESC_SEQ", "NUMBER", "DEFUN", "IF", "COND", 
                  "LET", "QUOTE", "PRINT", "DEFPARAMETER", "LAMBDA", "FORMAT", 
                  "AND", "OR", "NOT", "ELSE", "IDENTIFIER", "PLUS", "MINUS", 
                  "MULT", "DIV", "MOD", "GREATER_EQUAL", "LESS_EQUAL", "GREATER", 
                  "LESS", "EQUAL", "LPAREN", "RPAREN", "TRUE", "FALSE", 
                  "COMMENT", "WS", "ERROR" ]

    grammarFileName = "LispLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


